---
// Constants
import { allWallets, allRatedWallets } from '@/data/wallets'
import { hardwareWallets, ratedHardwareWallets } from '@/data/hardware-wallets'

import {
	ecosystemAttributeGroup,
	privacyAttributeGroup,
	securityAttributeGroup,
	selfSovereigntyAttributeGroup,
	transparencyAttributeGroup,
} from '@/schema/attribute-groups'

const attributeGroups = [
	securityAttributeGroup,
	privacyAttributeGroup,
	selfSovereigntyAttributeGroup,
	transparencyAttributeGroup,
	ecosystemAttributeGroup,
]


// Layouts
import Layout from '../layouts/Layout.astro'
import { NavigationPageLayout } from '@/layouts/NavigationPageLayout'


// Components
import LuKey from 'lucide-static/icons/key.svg?raw'
import LuWallet from 'lucide-static/icons/wallet.svg?raw'
import { navigationAbout, navigationCriteria } from '@/components/navigation'
import WalletTable from '@/ui/organisms/WalletTable.svelte'
---


<Layout
	metadata={{
		title: 'Walletbeat',
	}}
>
	<NavigationPageLayout
		client:load
		groups={[
			{
				id: 'home',
				items: [
					{
						title: 'Summary',
						href: '/',
						id: 'summary',
					},
				],
				overflow: false,
			},
			{
				id: 'wallets',
				items: [
					{
						title: 'Wallets',
						icon: { raw: LuWallet },
						href: '/',
						id: 'wallets-nav',
						children: Object.keys(allWallets).map(key => {
							// Using type-safe keys
							const safeKey = key as keyof typeof allWallets
							const wallet = allWallets[safeKey]

							return {
								title: wallet.metadata.displayName,
								href: `/${key}`,
								id: key,
								icon: `/images/wallets/${wallet.metadata.id}.${wallet.metadata.iconExtension}`,
							}
						}),
					},
				],
				overflow: false,
			},
			{
				id: 'hardware-wallets',
				items: [
					{
						title: 'Hardware Wallets',
						icon: { raw: LuKey },
						href: '/',
						id: 'hardware-wallets',
						children: Object.keys(hardwareWallets).map(key => {
							// Using type-safe keys
							const safeKey = key as keyof typeof hardwareWallets
							const wallet = hardwareWallets[safeKey]

							// Simplified display names for hardware wallets
							let displayName = wallet.metadata.displayName
							if (key === 'ledger') {
								displayName = 'Ledger'
							}
							if (key === 'trezor') {
								displayName = 'Trezor'
							}
							if (key === 'gridplus') {
								displayName = 'Grid Plus'
							}
							if (key === 'keystone') {
								displayName = 'Keystone'
							}

							return {
								title: displayName,
								href: `/${key}`,
								id: key,
								icon: `/images/wallets/${wallet.metadata.id}.${wallet.metadata.iconExtension}`,
							}
						}),
					},
				],
				overflow: false,
			},
			{
				id: 'criteria',
				items: [navigationCriteria],
				overflow: false,
			},
			{
				id: 'about',
				items: [navigationAbout],
				overflow: false,
			},
		]}
	>
		<div class="flex flex-col">
			<div>
				<div class="px-8 py-6 flex justify-between items-center flex-wrap min-h-96 relative">
					<div class="flex flex-col gap-2 py-8 flex-1">
						<h1 class="text-5xl font-extrabold text-accent">Who watches the wallets?</h1>
						<p class="text-secondary">
							Beta version; For content contributions, please see{' '}
							<a
								href="https://github.com/walletbeat/walletbeat"
								target="_blank"
								rel="noreferrer"
								class="text-accent underline"
							>
								GitHub
							</a>
							.
						</p>
					</div>
					<div class="flex-1 flex justify-center items-center">
						<img src="robot.png" alt="Walletbeat Robot" class="h-80 w-auto object-contain" />
					</div>
				</div>
			</div>

			<div class="w-full flex flex-col gap-2 p-4 md:p-8">
				<div class="wallet-tables">
					<div class="table-section">
						<h2>Software Wallets</h2>

						<WalletTable
							client:load
							wallets={Object.entries(allRatedWallets).map(([id, wallet]) => ({ id, wallet }))}
							{attributeGroups}
						/>
					</div>

					<div class="table-section">
						<h2>Hardware Wallets</h2>

						<WalletTable
							client:load
							wallets={Object.entries(ratedHardwareWallets).map(([id, wallet]) => ({ id, wallet }))}
							{attributeGroups}
						/>
					</div>
				</div>
			</div>
		</div>
	</NavigationPageLayout>
</Layout>

<style>
	.wallet-tables {
		display: grid;
		gap: 2rem;
	}

	.table-section {
		display: grid;
		gap: 1rem;
	}

	.table-section h2 {
		font-size: 1.5rem;
		font-weight: 500;
		margin: 0;
	}
</style>
