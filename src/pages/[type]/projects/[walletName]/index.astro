---
// Astro settings
export const prerender = true

// Data
import {
	isValidSoftwareWalletName,
	ratedSoftwareWallets,
	softwareWallets,
} from '@/data/software-wallets'

// Utils
import { nonEmptyKeys, nonEmptyMap } from '@/types/utils/non-empty.ts'

// Params
export const getStaticPaths = () => [
	...nonEmptyMap(nonEmptyKeys(softwareWallets), walletName => ({
		params: {
			type: 'wallet',
			walletName,
		},
	})),
	...nonEmptyMap(nonEmptyKeys(hardwareWallets), walletName => ({
		params: {
			type: 'hww',
			walletName,
		},
	})),
]

const { walletName } = Astro.params

// Derived
const walletType = isValidSoftwareWalletName(walletName) ? 'wallet' : 'hww'
const walletMetadata =
	walletName && isValidSoftwareWalletName(walletName)
		? ratedSoftwareWallets[walletName].metadata
		: hardwareWallets[walletName].metadata

// Layouts
import Layout from '@/layouts/Layout.astro'

// Components
import { WalletPage } from '@/components/WalletPage'
import { hardwareWallets } from '@/data/hardware-wallets'
---

{
	walletName && walletMetadata ? (
		<Layout
			metadata={{
				title: `${walletMetadata.displayName} - Walletbeat`,
				description: `How does ${walletMetadata.displayName} stack up as an Ethereum wallet?`,
				icons: [
					{
						url: `/images/${walletType}/${walletMetadata.id}.${walletMetadata.iconExtension}`,
					},
				],
				keywordsBefore: [
					walletName,
					walletMetadata.displayName,
					`${walletMetadata.id} wallet`,
					`${walletMetadata.displayName} wallet`,
					'wallet',
				],
				keywordsAfter: ['ranking', 'reviews', 'security', 'privacy'],
			}}
		>
			<WalletPage {walletName} client:load />
		</Layout>
	) : (
		<Layout
			metadata={{
				title: '404',
			}}
		>
			<div>Invalid wallet name!</div>
		</Layout>
	)
}
