---
export const prerender = true
import Layout from '@/layouts/Layout.astro'
import { getAttributeGroupById, mapNonExemptAttributeGroupsInTree } from '@/schema/attribute-groups'
import { CriteriaPage } from './criteria'
import {
	isValidSoftwareWalletName,
	unratedSoftwareWallet,
	softwareWallets,
} from '@/data/software-wallets'
import {
	hardwareWallets,
	isValidHardwareWalletName,
	unratedHardwareWallet,
} from '@/data/hardware-wallets'
import { representativeWalletForType } from '@/data/wallets'
import { urlSlugToWalletType } from '@/schema/wallet-types'

export const getStaticPaths = () => {
	return [
		...mapNonExemptAttributeGroupsInTree(unratedSoftwareWallet.overall, attr => ({
			params: {
				type: 'wallet',
				criteria: attr.id,
			},
		})),
		...mapNonExemptAttributeGroupsInTree(unratedHardwareWallet.overall, attr => ({
			params: {
				criteria: attr.id,
				type: 'hww',
			},
		})),
		// Redirects
		...Object.entries(softwareWallets).map(([_walletId, wallet]) => ({
			params: {
				type: 'wallet',
				criteria: wallet.metadata.id,
			},
		})),
		...Object.entries(hardwareWallets).map(([_walletId, wallet]) => ({
			params: {
				type: 'hww',
				criteria: wallet.metadata.id,
			},
		})),
	]
}
const { criteria, type } = Astro.params

// if is wallet or hardware wallet redirect to projects/[walletName]
const isWallet = isValidHardwareWalletName(criteria) || isValidSoftwareWalletName(criteria)

if (isWallet) {
	return Astro.redirect('/' + type + `/projects/${criteria}`)
}

const walletType = urlSlugToWalletType(type)

if (walletType === null) {
	return Astro.redirect('/')
}

const attrGroup = getAttributeGroupById(criteria, representativeWalletForType(walletType).overall)

if (attrGroup === null) {
	throw new Error('Invalid attribute group')
}
---

<Layout
	metadata={{
		title: `${attrGroup.displayName} - Walletbeat`,
		description: `Learn how ${attrGroup.displayName} impacts your wallet experience.`,
		keywordsBefore: [`Ethereum ${attrGroup.displayName}`],
	}}
>
	<CriteriaPage walletType={walletType} attrGroupId={criteria} client:load />
</Layout>
