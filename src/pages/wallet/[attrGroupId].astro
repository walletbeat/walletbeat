---
// Types/constants
import { WalletType } from '@/schema/wallet-types'
import { defaultNavigationItems } from '@/components/navigation'
import { representativeWalletForType, allRatedWallets } from '@/data/wallets'


// Functions
import { getAttributeGroupById } from '@/schema/attribute-groups'
import { getStaticPathsForWalletType } from '@/components/CriteriaPage'


// Context
export const prerender = true

export const getStaticPaths = getStaticPathsForWalletType(WalletType.SOFTWARE)

const { attrGroupId } = Astro.params


// Data
const attrGroup = getAttributeGroupById(
	attrGroupId,
	representativeWalletForType(WalletType.SOFTWARE).overall,
)

if (!attrGroup)
	throw new Error('Invalid attribute group')


// Components
import Layout from '@/layouts/Layout.astro'
import Navigation from '@/ui/organisms/Navigation.astro'
import WalletTable from '@/ui/organisms/WalletTable.svelte'
---

<Layout
	metadata={{
		title: `${attrGroup.displayName} - Walletbeat`,
		description: `Learn how ${attrGroup.displayName} impacts your wallet experience.`,
		keywordsBefore: [`Ethereum ${attrGroup.displayName}`],
	}}
>
	<Navigation
		navigationItems={defaultNavigationItems}
	/>
	
	<main>
		<section>
			<WalletTable
				client:load
				title="Software Wallets"
				wallets={
					Object
						.values(allRatedWallets)
						.filter(wallet => wallet.types[WalletType.SOFTWARE])
				}
				attributeGroups={[attrGroup]}
				expandByDefault={true}
			/>
		</section>
	</main>
</Layout>
