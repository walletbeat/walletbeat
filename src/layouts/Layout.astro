---
// Global CSS
import '../global.css'

// Props
import type { ComponentProps } from 'astro/types'
import { ClientRouter } from 'astro:transitions'

type Props = {
	metadata: ComponentProps<typeof Metadata>['metadata']

	/**
	 * If specified, rewrite URL to this as the page loads.
	 */
	rewriteUrlTo?: string
}

const { metadata, rewriteUrlTo } = Astro.props

// Components
import Metadata from '@/components/Metadata.astro'
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<Metadata {metadata} />
		<ClientRouter />
		<script is:inline>
			// `color-scheme` override
			const colorScheme = localStorage.getItem('theme')
			if (colorScheme) document.documentElement.style.colorScheme = colorScheme
		</script>
		{
			rewriteUrlTo !== undefined && (
				<script is:inline define:vars={{ rewriteUrlTo }}>
					history.replaceState(null, '', rewriteUrlTo);
				</script>
			)
		}
	</head>
	<body>
		<div
			id="layout"
			data-scroll-container data-sticky-container
		>
			<slot />
		</div>
	</body>
</html>


<style>
	#layout {
		/* Constants */
		--navigation-desktop-inlineSize: 20rem;
		--navigation-mobile-blockSize: 4rem;

		/* Rules */
		width: 100dvw;
		height: 100dvh;
		display: grid;
		align-items: start;
		gap: var(--separator-width);

		@media not (max-width: 1024px) {
			grid-template:
				'Nav Main' 100dvh
				/ var(--navigation-desktop-inlineSize) minmax(0, 1fr);
			;

			&[data-sticky-container] {
				--sticky-paddingInlineStart: var(--navigation-desktop-inlineSize);
			}
		}

		@media (max-width: 1024px) {
			grid-template:
				'Nav' var(--navigation-mobile-blockSize)
				'Main' 1fr
				/ minmax(0, 1fr)
			;

			&[data-sticky-container] {
				--sticky-paddingBlockStart: var(--navigation-mobile-blockSize);
			}
		}

		> * {
			box-shadow: 0 0 0 var(--separator-width) var(--border-color);
		}

		> nav {
			grid-area: Nav;
		}

		> main {
			grid-area: Main;
		}
	}
</style>
