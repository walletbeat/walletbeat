---
description: Wallet schema rules
globs: src/**/*.ts, data/**/*.ts
alwaysApply: true
---

# Wallet schema rules

This site deals with Ethereum wallets. The processing pipeline is as follows:

Wallet data is stored under `/data`. It contains:

- Wallet metadata, such as the name of the wallet project, which entity funds its development, etc.
- Wallet *feature* data, i.e. objectively-observable facts about each Ethereum wallet the site tracks.

Wallet feature data is unopinionated and objective. This data is the input of the next part of the processing pipeline: **Attributes**.

Attributes take feature data (and no other input) and return an `Evaluation` object. An `Evaluation` contains an attribute-specific `Value` interface which contains one of 5 possible **ratings**:

- `PASS`: The wallet passes the attribute's criteria.
- `FAIL`: The wallet does not pass the attribute's criteria.
- `PARTIAL`: The wallet partially passes the attribute's criteria.
- `UNRATED`: The wallet feature data is insufficient for the attribute's criteria to be evaluated.
- `EXEMPT`: The wallet is such that it does not make sense to evaluate this attribute for this specific wallet.

Attributes are part of **attribute groups**, which are logical groupings of attributes. Attribute groups form a attribute-group-specific "score" for each wallet on this attribute group.

Let's walk through an example. We want to rate wallets based on their security ("Security" is the **attribute group**).
One aspect of a wallet's security is whether or not it verifies the integrity of the blockchain it interacts with.
We call this aspect "chain verification" ("Chain verification" is the **attribute**).
A wallet can verify the integrity of the blockchain using a **light client**.
There are multiple off-the-shelf light client implementations that a wallet could integrate, or it could implement its own.
Or it could integrate multiple implementations and let the user choose between them.
For the purpose of evaluating whether a wallet fulfills the "chain verification" attribute, many of them is acceptable.
Therefore, the wallet's feature data must contain which light client implementation(s) a wallet use. Which light clients are integrated is the **feature data**.

- A rating of `PASS` from the chain verification attribute would mean that the wallet correctly performs chain verification using one or more of the acceptable light client implementations.
- A rating of `FAIL` from the chain verification attribute would mean that the wallet does not perform chain verification, for example because it does not integrate any light client.
- A rating of `PARTIAL` from the chain verification attribute would mean that the wallet *might* correctly performs chain verification; for example, this could be because the light client implementation it uses has not been audited, or because it only uses its light clients for some chains or transactions rather than for all of them.
- A rating of `UNRATED` from the chain verification attribute would mean that the wallet feature data about which light clients are integrated in the wallet is unknown. More research is needed to determine which light clients this wallet has integrated.
- A rating of `EXEMPT` from the chain verification attribute would mean that the wallet cannot be expected to perform chain verification. For example, this could be a resource-constrained hardware wallet for which executing even a light client would be too much to fit in its own memory.

## Wallet taxonomy

Ethereum wallets come in many different shapes and sizes, with different audiences, focuses, and use-cases. Walletbeat needs to take this into account when rating and categorizing wallets.

### What is a wallet?

An Ethereum wallet is a piece of technology that empowers an individual or an organization to own, control, and manage their presence on the Ethereum ecosystem.
As Ethereum is a blockchain, this piece of technology inherently involves software components. Some wallets may also involve hardware components.

### Wallet variants

Wallets may run on a number of platforms, such as desktop computers, mobile phones, as browser extension wallets, or they may be hardware wallets.
Many wallet developers implement common wallet code that can run in many of these form factors, and release such code under the same wallet name.
For example, many browser extension wallets have a mobile app version.

Walletbeat calls these "variants", and uses the `Variant` enum to represent this. A `Variant` is a single releasable version of a wallet.
All wallets have at least one variant, and many wallets have more than one variant.

Variants can be used to derive the set of features that is worth evaluating on the wallet.
For example, the *mobile* variant of a wallet cannot be rated on how well it implements EIP-1193 (Ethereum Provider JavaScript API), as this is only relevant to wallets that directly integrate within browsers.
However, the *browser* variant of the wallet of the same name *should* be rated on EIP-1193.
Therefore, rating exemptions apply at the level of a single wallet variant.
Consequently, **each variant of a wallet may have _divergent_ ratings for the _same_ attribute**.
While these ratings later need to be aggregated for the purpose of display on the Walletbeat summary table, the rating system fundamentally still needs to operate at the granularity of single wallet variants.

### Wallet types

A "wallet type" (represented by the `WalletType` enum) is a narrower version of a `Variant`. This means every `Variant` maps to a single `WalletType`, but that the reserve mapping is not one-to-one.
Currently, it only has three values:

- `WalletType.SOFTWARE`, corresponding to `Variant.DESKTOP`, `Variant.MOBILE`, and `Variant.BROWSER`.
- `WalletType.HARDWARE`, corresponding to `Variant.HARDWARE`.
- `WalletType.EMBEDDED`, corresponding to `Variant.EMBEDDED`.

Much like variants, a single wallet may have more than one type at once.

Wallet types are useful for:

- Providing simpler rating exemption rules for software vs hardware wallets. For example, hardware supply chain security should not apply to software-only wallets.
- Providing logical, human-understandable groupings on the Walletbeat homepage and navigation bar. Each wallet type corresponds to one large summary table.
  Because attributes that apply to software-only wallets are quite different from those that apply to hardware-only wallets,
  the ability to segment these sets of wallets into separate tables makes the rating table much less confusing for users,
  as only the relevant attributes are displayed in each table.

### Wallet profiles

Wallet profiles, as represented by the `WalletProfile` enum, represent the *intended audience*, *market segment*, or *specific use-case* that a wallet is aiming for.
This is completely unrelated to the platforms the wallet runs on, i.e. it is unrelated to `Variant` or `WalletType`.
Most wallets use `WalletProfile.GENERIC`, which represents the fact that the developers behind this wallet have not chosen a specific implementation focus for this wallet.

Another possible wallet profile is `WalletProfile.PAYMENTS`, which is used for wallets that focus on peer-to-peer payments.
These wallets are attempting to replace traditional, pre-Ethereum peer-to-peer payment applications.
Therefore, the intended market segment and user audience for these wallets is quite different from the `GENERIC` wallet profile.
This has consequences on the set of features that this wallet is expected to implement.
For example, a payments-focused software wallet _should_ be subject to be rated on whether it implements chain verification (because it interacts with the blockchain like any other software wallet),
but _should not_ be subject to be rated on whether it implements scam prevention features for arbitrary smart contract transactions (because it does not let users interact with arbitrary smart contracts; just do payments).

Unlike `Variant` and `WalletType`, a single wallet (regardless of how many `Variant`s it has) can only have one `WalletProfile`.

## Wallet features

- None of the fields in `WalletFeatures` should be able to be `undefined` (i.e. none of them should end with `?`). None of the fields in this type should be marked as possibly undefined.
- When a wallet feature is not known, it is represented by `null`. This means that searching for `null` in `/data` is an effective way to find which pieces of wallet feature data is missing from this project's database.
- Most wallet features in `WalletFeatures` should be wrapped with `VariantFeature`. This is defined as `type VariantFeature<T> = T | AtLeastOneVariant<T> | null`.
  In other words, `VariantFeature` wraps feature data `T` in such a way that it can either be:

	- `null`, representing the fact that this feature data has not yet been researched about this wallet.
	- `AtLeastOneVariant<T>`, mapping one or more of the wallet's variants to `T`, where each map value is the feature data for that one wallet `Variant`.
	- `T` itself, representing the fact that all `Variant`s of this wallet have the same implementation of this feature and therefore share the same feature data.

  `VariantFeature<T>` data is later resolved to `ResolvedFeature<T>` as part of the wallet evaluation processing pipeline.
  This pass normalizes `VariantFeature` data so that all of them are either `null`, or maps from `Variant` to feature data.
